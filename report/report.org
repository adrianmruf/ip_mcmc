#+TITLE: Markov Chain Monte Carlo for Inverse Problems

#+OPTIONS: H:5

#+INCLUDE: latex_header.org

#+INCLUDE: theory.org

#+INCLUDE: code.org

#+INCLUDE: results.org

#+BIBLIOGRAPHY: ../papers/inverse_problems plain

* TODO Meta                                                        :noexport:
** TODO Can I get code execution to work here for the results? (-> DIY jupyter I guess)
** TODO Can I embed svgs?
** DONE Create/Link to bibtex file
** DONE Tests for pCN prop/acc
** DONE Write down what I've done so far
*** TODO What's up with the ac of pCN?
*** DONE Write up/insert plots
** TODO Theory: What is an infinite-dimensional Gaussian?
*** Some definition about random fields blabla in cotter
*** What about BB stuart?
*** What about the internet?
** DONE Code BB Stuart Example 2.1
** DONE Code BB Stuart Example 2.2
** DONE Read Lorenz96
** DONE Implement Lorenz96
** DONE Report on Lorenz96 model
** TODO Do MCMC on Lorenz96
*** DONE dont make c uncertain
*** DONE nicer priors
*** maybe even make the system even smaller (J=1 (0?) -> no fast dynamics)
*** TODO AC plot to prove that MCMC works
** DONE Report on LorenzMCMC
*** DONE Write about how the "ergodic properties" of the Lorenz system actually help you
    Time average over long simulation = ensemble average
    Get a lot of information about the system in a single run
    The intitial condititions of the evolution operator are meaningless
*** Combine plots
    Probably easier to do with matplotlib
**** DONE 3 lorenz states
**** DONE 3 density plots F, h, b
*** DONE Correct model setup
*** DONE Time-averages are just np.mean, but the RK-integrator does non-uniform timesteps
    
** Report: Lessons learned
   - Distributions was a good idea to make class,
     however it evolved more into a wrapper for scipy.stats pdf
     -> so what's the lesson learned?
   - logpdf is very important (conjectured)

